import { useState, useEffect } from "react";
import { useNavigate, useSearchParams } from "react-router-dom";
import SocialContainer from "@/components/SocialContainer";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { ArrowLeft, Loader, Plus, X, Upload, ArrowUp } from "lucide-react";
import AnimatedTags from "@/components/smoothui/ui/AnimatedTags";
import { useToast } from "@/hooks/use-toast";

type CoachProfile = {
  id: string;
  name: string;
  username: string;
  profilePicture: string | null;
  firstName: string;
  lastName: string;
  age: string;
  gender: string;
  city: string;
  phone: string;
  email: string;
  telegram: string;
  whatsapp: string;
  experience: string;
  education: string;
  certificates: string;
  workplaces: string;
  specialties: string;
  sports: string[];
  ageGroups: string[];
  skillLevels: string[];
  trainingTypes: string[];
  individualPrice: string;
  groupPrice: string;
  onlinePrice: string;
  packages: string;
  workDays: string[];
  workTime: string;
  homeVisits: boolean;
  onlineTraining: boolean;
  socialLinks: Array<{ type: string; url: string }>;
  achievements: string;
  philosophy: string;
  approach: string;
  studentAchievements: string;
  motivation: string;
};

export default function BoardCreatePage() {
  const navigate = useNavigate();
  const { toast } = useToast();
  const [searchParams] = useSearchParams();
  const [loading, setLoading] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [formData, setFormData] = useState({
    // –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    firstName: "",
    lastName: "",
    age: "",
    gender: "",
    city: "",
    profilePicture: "",
    
    // –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    phone: "",
    email: "",
    telegram: "",
    whatsapp: "",
    
    // –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    experience: "",
    education: "",
    certificates: "",
    workplaces: "",
    
    // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    specialties: "",
    sports: [] as string[],
    ageGroups: [] as string[],
    skillLevels: [] as string[],
    trainingTypes: [] as string[],
    
    // –¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
    individualPrice: "",
    groupPrice: "",
    onlinePrice: "",
    packages: "",
    
    // –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    workDays: [] as string[],
    workTime: "",
    homeVisits: false,
    onlineTraining: false,
    
    // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
    socialLinks: [] as Array<{ type: string; url: string }>,
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    achievements: "",
    philosophy: "",
    approach: "",
    studentAchievements: "",
    motivation: "",
  });
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [newSocialLink, setNewSocialLink] = useState({ type: "instagram", url: "" });
  const [showScrollButton, setShowScrollButton] = useState(false);
  const [imageUploading, setImageUploading] = useState(false);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–≤–µ—Ä—Ö"
  useEffect(() => {
    const handleScroll = () => {
      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
      setShowScrollButton(scrollTop > 300); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –Ω–∞ 300px
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞–Ω–∫–µ—Ç—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  useEffect(() => {
    const profileId = searchParams.get('edit');
    if (profileId) {
      const STORAGE_KEY = "coach_board_profiles_v1";
      const existingProfiles = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');
      const profileToEdit = existingProfiles.find((p: CoachProfile) => p.id === profileId);
      
      if (profileToEdit) {
        setIsEditing(true);
        setFormData({
          firstName: profileToEdit.firstName || "",
          lastName: profileToEdit.lastName || "",
          age: profileToEdit.age || "",
          gender: profileToEdit.gender || "",
          city: profileToEdit.city || "",
          profilePicture: profileToEdit.profilePicture || "",
          phone: profileToEdit.phone || "",
          email: profileToEdit.email || "",
          telegram: profileToEdit.telegram || "",
          whatsapp: profileToEdit.whatsapp || "",
          experience: profileToEdit.experience || "",
          education: profileToEdit.education || "",
          certificates: profileToEdit.certificates || "",
          workplaces: profileToEdit.workplaces || "",
          specialties: profileToEdit.specialties || "",
          sports: profileToEdit.sports || [],
          ageGroups: profileToEdit.ageGroups || [],
          skillLevels: profileToEdit.skillLevels || [],
          trainingTypes: profileToEdit.trainingTypes || [],
          individualPrice: profileToEdit.individualPrice || "",
          groupPrice: profileToEdit.groupPrice || "",
          onlinePrice: profileToEdit.onlinePrice || "",
          packages: profileToEdit.packages || "",
          workDays: profileToEdit.workDays || [],
          workTime: profileToEdit.workTime || "",
          homeVisits: profileToEdit.homeVisits || false,
          onlineTraining: profileToEdit.onlineTraining || false,
          socialLinks: profileToEdit.socialLinks || [],
          achievements: profileToEdit.achievements || "",
          philosophy: profileToEdit.philosophy || "",
          approach: profileToEdit.approach || "",
          studentAchievements: profileToEdit.studentAchievements || "",
          motivation: profileToEdit.motivation || "",
        });
      }
    }
  }, [searchParams]);

  // –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞
  const availableSports = [
    "–§—É—Ç–±–æ–ª", "–ë–∞—Å–∫–µ—Ç–±–æ–ª", "–í–æ–ª–µ–π–±–æ–ª", "–¢–µ–Ω–Ω–∏—Å", "–ë–∞–¥–º–∏–Ω—Ç–æ–Ω", "–ü–∏–Ω–≥-–ø–æ–Ω–≥",
    "–ë–µ–≥", "–ü–ª–∞–≤–∞–Ω–∏–µ", "–í–µ–ª–æ—Å–ø–æ—Ä—Ç", "–õ—ã–∂–∏", "–°–Ω–æ—É–±–æ—Ä–¥", "–ö–æ–Ω—å–∫–∏",
    "–ë–æ–∫—Å", "–ö–∞—Ä–∞—Ç–µ", "–î–∑—é–¥–æ", "–¢—Ö—ç–∫–≤–æ–Ω–¥–æ", "–ë–æ—Ä—å–±–∞", "–ú–ú–ê",
    "–ô–æ–≥–∞", "–ü–∏–ª–∞—Ç–µ—Å", "–°—Ç—Ä–µ—Ç—á–∏–Ω–≥", "–ê—ç—Ä–æ–±–∏–∫–∞", "–ö—Ä–æ—Å—Å—Ñ–∏—Ç", "–¢—è–∂–µ–ª–∞—è –∞—Ç–ª–µ—Ç–∏–∫–∞",
    "–ì–∏–º–Ω–∞—Å—Ç–∏–∫–∞", "–ê–∫—Ä–æ–±–∞—Ç–∏–∫–∞", "–ü–∞—Ä–∫—É—Ä", "–°–∫–∞–ª–æ–ª–∞–∑–∞–Ω–∏–µ", "–¢—Ä–∏–∞—Ç–ª–æ–Ω", "–ú–∞—Ä–∞—Ñ–æ–Ω",
    "–ì–æ–ª—å—Ñ", "–ë–∏–ª—å—è—Ä–¥", "–î–∞—Ä—Ç—Å", "–®–∞—Ö–º–∞—Ç—ã", "–®–∞—à–∫–∏", "–ë–æ—É–ª–∏–Ω–≥",
    "–¢–∞–Ω—Ü—ã", "–ë–∞–ª–µ—Ç", "–•–∏–ø-—Ö–æ–ø", "–°–∞–ª—å—Å–∞", "–ë–∞—á–∞—Ç–∞", "–°—Ç—Ä–∏—Ç-–¥—ç–Ω—Å",
    "–°–µ—Ä—Ñ–∏–Ω–≥", "–í–∏–Ω–¥—Å–µ—Ä—Ñ–∏–Ω–≥", "–ö–∞—è–∫–∏–Ω–≥", "–†–∞—Ñ—Ç–∏–Ω–≥", "–î–∞–π–≤–∏–Ω–≥", "–§—Ä–∏–¥–∞–π–≤–∏–Ω–≥"
  ];

  const handleInputChange = (field: string, value: string | boolean | string[]) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: "" }));
    }
  };

  const handleArrayChange = (field: string, value: string, checked: boolean) => {
    setFormData(prev => ({
      ...prev,
      [field]: checked 
        ? [...(prev[field as keyof typeof prev] as string[]), value]
        : (prev[field as keyof typeof prev] as string[]).filter(item => item !== value)
    }));
  };

  const addSocialLink = () => {
    if (newSocialLink.url.trim()) {
      setFormData(prev => ({
        ...prev,
        socialLinks: [...prev.socialLinks, { ...newSocialLink }]
      }));
      setNewSocialLink({ type: "instagram", url: "" });
    }
  };

  const removeSocialLink = (index: number) => {
    setFormData(prev => ({
      ...prev,
      socialLinks: prev.socialLinks.filter((_, i) => i !== index)
    }));
  };

  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if (!file.type.startsWith('image/')) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
    if (file.size > 5 * 1024 * 1024) {
      alert('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB');
      return;
    }

    setImageUploading(true);

    const reader = new FileReader();
    reader.onload = (e) => {
      const result = e.target?.result as string;
      setFormData(prev => ({
        ...prev,
        profilePicture: result
      }));
      setImageUploading(false);
    };
    reader.onerror = () => {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      setImageUploading(false);
    };
    reader.readAsDataURL(file);
  };

  const validateForm = () => {
    console.log('üîç BoardCreatePage - Starting validation...');
    const newErrors: Record<string, string> = {};
    
    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!formData.firstName.trim()) {
      newErrors.firstName = "–£–∫–∞–∂–∏—Ç–µ –∏–º—è";
      console.log('‚ùå BoardCreatePage - firstName validation failed');
    }
    if (!formData.lastName.trim()) {
      newErrors.lastName = "–£–∫–∞–∂–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é";
      console.log('‚ùå BoardCreatePage - lastName validation failed');
    }
    if (!formData.age.trim()) {
      newErrors.age = "–£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç";
      console.log('‚ùå BoardCreatePage - age validation failed');
    }
    if (!formData.gender) {
      newErrors.gender = "–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª";
      console.log('‚ùå BoardCreatePage - gender validation failed');
    }
    if (!formData.city.trim()) {
      newErrors.city = "–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥";
      console.log('‚ùå BoardCreatePage - city validation failed');
    }
    if (!formData.phone.trim()) {
      newErrors.phone = "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω";
      console.log('‚ùå BoardCreatePage - phone validation failed');
    }
    if (!formData.email.trim()) {
      newErrors.email = "–£–∫–∞–∂–∏—Ç–µ email";
      console.log('‚ùå BoardCreatePage - email validation failed');
    }
    if (formData.sports.length === 0) {
      newErrors.sports = "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞";
      console.log('‚ùå BoardCreatePage - sports validation failed');
    }
    if (!formData.achievements.trim()) {
      newErrors.achievements = "–£–∫–∞–∂–∏—Ç–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è";
      console.log('‚ùå BoardCreatePage - achievements validation failed');
    }
    
    console.log('üîç BoardCreatePage - Validation errors:', newErrors);
    setErrors(newErrors);
    const isValid = Object.keys(newErrors).length === 0;
    console.log('üîç BoardCreatePage - Validation result:', isValid);
    return isValid;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    console.log('üöÄ BoardCreatePage - Form submitted!');
    console.log('üöÄ BoardCreatePage - Form data:', formData);
    
    const isValid = validateForm();
    console.log('üöÄ BoardCreatePage - Form validation result:', isValid);
    
    if (!isValid) {
      console.log('‚ùå BoardCreatePage - Form validation failed');
      return;
    }
    
    console.log('‚úÖ BoardCreatePage - Form validation passed, starting save...');
    setLoading(true);
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∞–Ω–∫–µ—Ç—ã –∏–∑ localStorage
      const STORAGE_KEY = "coach_board_profiles_v1";
      const existingProfiles = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');
      
      const profileId = searchParams.get('edit');
      let updatedProfiles;
      
      if (isEditing && profileId) {
        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞–Ω–∫–µ—Ç—ã
        updatedProfiles = existingProfiles.map((profile: CoachProfile) => 
          profile.id === profileId 
            ? {
                ...profile,
                name: `${formData.firstName} ${formData.lastName}`,
                profilePicture: formData.profilePicture,
                firstName: formData.firstName,
                lastName: formData.lastName,
                age: formData.age,
                gender: formData.gender,
                city: formData.city,
                phone: formData.phone,
                email: formData.email,
                telegram: formData.telegram,
                whatsapp: formData.whatsapp,
                experience: formData.experience,
                education: formData.education,
                certificates: formData.certificates,
                workplaces: formData.workplaces,
                specialties: formData.specialties,
                sports: formData.sports,
                ageGroups: formData.ageGroups,
                skillLevels: formData.skillLevels,
                trainingTypes: formData.trainingTypes,
                individualPrice: formData.individualPrice,
                groupPrice: formData.groupPrice,
                onlinePrice: formData.onlinePrice,
                packages: formData.packages,
                workDays: formData.workDays,
                workTime: formData.workTime,
                homeVisits: formData.homeVisits,
                onlineTraining: formData.onlineTraining,
                socialLinks: formData.socialLinks,
                achievements: formData.achievements,
                philosophy: formData.philosophy,
                approach: formData.approach,
                studentAchievements: formData.studentAchievements,
                motivation: formData.motivation,
              }
            : profile
        );
      } else {
        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞–Ω–∫–µ—Ç—ã
        const newProfile = {
          id: Date.now().toString(), // –ü—Ä–æ—Å—Ç–æ–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
          name: `${formData.firstName} ${formData.lastName}`,
          username: `coach_${Date.now()}`, // –í—Ä–µ–º–µ–Ω–Ω—ã–π username
          profilePicture: formData.profilePicture,
          firstName: formData.firstName,
          lastName: formData.lastName,
          age: formData.age,
          gender: formData.gender,
          city: formData.city,
          phone: formData.phone,
          email: formData.email,
          telegram: formData.telegram,
          whatsapp: formData.whatsapp,
          experience: formData.experience,
          education: formData.education,
          certificates: formData.certificates,
          workplaces: formData.workplaces,
          specialties: formData.specialties,
          sports: formData.sports,
          ageGroups: formData.ageGroups,
          skillLevels: formData.skillLevels,
          trainingTypes: formData.trainingTypes,
          individualPrice: formData.individualPrice,
          groupPrice: formData.groupPrice,
          onlinePrice: formData.onlinePrice,
          packages: formData.packages,
          workDays: formData.workDays,
          workTime: formData.workTime,
          homeVisits: formData.homeVisits,
          onlineTraining: formData.onlineTraining,
          socialLinks: formData.socialLinks,
          achievements: formData.achievements,
          philosophy: formData.philosophy,
          approach: formData.approach,
          studentAchievements: formData.studentAchievements,
          motivation: formData.motivation,
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
        updatedProfiles = [...existingProfiles, newProfile];
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
      localStorage.setItem(STORAGE_KEY, JSON.stringify(updatedProfiles));
      console.log('üíæ BoardCreatePage - Saved profiles:', updatedProfiles.length);
      console.log('üíæ BoardCreatePage - Updated profiles:', updatedProfiles);
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è UX
      await new Promise(r => setTimeout(r, 300));
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      toast({
        title: isEditing ? "–ê–Ω–∫–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!" : "–ê–Ω–∫–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!",
        description: isEditing 
          ? "–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —Ç—Ä–µ–Ω–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞." 
          : "–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —Ç—Ä–µ–Ω–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ –¥–æ—Å–∫—É.",
      });
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ—Å–∫–∏
      navigate("/u/board", { replace: true });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <SocialContainer>
      <div className="w-full max-w-4xl flex flex-col gap-4 sm:gap-4">
        <div>
          <Button
            variant="ghost"
            onClick={() => navigate("/u/board")}
            className="mb-2 inline-flex items-center h-auto rounded-full px-4 py-1 text-sm hover-secondary border border-border"
          >
            <ArrowLeft className="w-4 h-4" />
            –ù–∞–∑–∞–¥ –∫ –¥–æ—Å–∫–µ —Ç—Ä–µ–Ω–µ—Ä–æ–≤
          </Button>
          <h1 className="text-2xl sm:text-3xl font-bold">
            {isEditing ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã —Ç—Ä–µ–Ω–µ—Ä–∞" : "–°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã —Ç—Ä–µ–Ω–µ—Ä–∞"}
          </h1>
          <p className="text-muted-foreground mt-2">
            {isEditing 
              ? "–û–±–Ω–æ–≤–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç–µ —Ç—Ä–µ–Ω–µ—Ä–∞"
              : "–°–æ–∑–¥–∞–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∞–Ω–∫–µ—Ç—É —Ç—Ä–µ–Ω–µ—Ä–∞ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö, –æ–ø—ã—Ç–µ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"
            }
          </p>
        </div>

        <form onSubmit={handleSubmit} className="space-y-6">
          {/* –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <Card className="rounded-3xl">
            <CardHeader>
              <CardTitle>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="firstName">–ò–º—è *</Label>
                  <Input
                    id="firstName"
                    value={formData.firstName}
                    onChange={(e) => handleInputChange("firstName", e.target.value)}
                    placeholder="–í–∞—à–µ –∏–º—è"
                    className={errors.firstName ? "border-destructive" : ""}
                  />
                  {errors.firstName && (
                    <p className="text-sm text-destructive">{errors.firstName}</p>
                  )}
                </div>
                <div className="space-y-2">
                  <Label htmlFor="lastName">–§–∞–º–∏–ª–∏—è *</Label>
                  <Input
                    id="lastName"
                    value={formData.lastName}
                    onChange={(e) => handleInputChange("lastName", e.target.value)}
                    placeholder="–í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è"
                    className={errors.lastName ? "border-destructive" : ""}
                  />
                  {errors.lastName && (
                    <p className="text-sm text-destructive">{errors.lastName}</p>
                  )}
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="age">–í–æ–∑—Ä–∞—Å—Ç *</Label>
                  <Input
                    id="age"
                    type="number"
                    value={formData.age}
                    onChange={(e) => handleInputChange("age", e.target.value)}
                    placeholder="25"
                    className={errors.age ? "border-destructive" : ""}
                  />
                  {errors.age && (
                    <p className="text-sm text-destructive">{errors.age}</p>
                  )}
                </div>
                <div className="space-y-2">
                  <Label htmlFor="gender">–ü–æ–ª *</Label>
                  <Select value={formData.gender} onValueChange={(value) => handleInputChange("gender", value)}>
                    <SelectTrigger className={errors.gender ? "border-destructive" : ""}>
                      <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="male">–ú—É–∂—Å–∫–æ–π</SelectItem>
                      <SelectItem value="female">–ñ–µ–Ω—Å–∫–∏–π</SelectItem>
                    </SelectContent>
                  </Select>
                  {errors.gender && (
                    <p className="text-sm text-destructive">{errors.gender}</p>
                  )}
                </div>
                <div className="space-y-2">
                  <Label htmlFor="city">–ì–æ—Ä–æ–¥ *</Label>
                  <Input
                    id="city"
                    value={formData.city}
                    onChange={(e) => handleInputChange("city", e.target.value)}
                    placeholder="–ú–æ—Å–∫–≤–∞"
                    className={errors.city ? "border-destructive" : ""}
                  />
                  {errors.city && (
                    <p className="text-sm text-destructive">{errors.city}</p>
                  )}
                </div>
              </div>

              <div className="space-y-2">
                <Label>–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è</Label>
                <div className="flex items-center gap-4">
                  <div className="w-20 h-20 bg-muted rounded-full flex items-center justify-center overflow-hidden">
                    {imageUploading ? (
                      <Loader className="w-8 h-8 text-muted-foreground animate-spin" />
                    ) : formData.profilePicture ? (
                      <img 
                        src={formData.profilePicture} 
                        alt="Profile" 
                        className="w-full h-full rounded-full object-cover" 
                      />
                    ) : (
                      <Upload className="w-8 h-8 text-muted-foreground" />
                    )}
                  </div>
                  <div className="flex flex-col gap-2">
                    <input
                      type="file"
                      accept="image/*"
                      onChange={handleImageUpload}
                      className="hidden"
                      id="profile-picture-upload"
                      disabled={imageUploading}
                    />
                    <Button 
                      type="button" 
                      variant="outline" 
                      size="sm"
                      onClick={() => document.getElementById('profile-picture-upload')?.click()}
                      disabled={imageUploading}
                    >
                      {imageUploading ? (
                        <>
                          <Loader className="w-4 h-4 mr-2 animate-spin" />
                          –ó–∞–≥—Ä—É–∑–∫–∞...
                        </>
                      ) : (
                        <>
                          <Upload className="w-4 h-4 mr-2" />
                          {formData.profilePicture ? '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ'}
                        </>
                      )}
                    </Button>
                    {formData.profilePicture && (
                      <Button 
                        type="button" 
                        variant="ghost" 
                        size="sm"
                        onClick={() => setFormData(prev => ({ ...prev, profilePicture: "" }))}
                        className="text-destructive hover:text-destructive"
                      >
                        <X className="w-4 h-4 mr-1" />
                        –£–¥–∞–ª–∏—Ç—å
                      </Button>
                    )}
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <Card className="rounded-3xl">
            <CardHeader>
              <CardTitle>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="phone">–¢–µ–ª–µ—Ñ–æ–Ω *</Label>
                  <Input
                    id="phone"
                    type="tel"
                    value={formData.phone}
                    onChange={(e) => handleInputChange("phone", e.target.value)}
                    placeholder="+7 (999) 123-45-67"
                    className={errors.phone ? "border-destructive" : ""}
                  />
                  {errors.phone && (
                    <p className="text-sm text-destructive">{errors.phone}</p>
                  )}
                </div>
                <div className="space-y-2">
                  <Label htmlFor="email">Email *</Label>
                  <Input
                    id="email"
                    type="email"
                    value={formData.email}
                    onChange={(e) => handleInputChange("email", e.target.value)}
                    placeholder="example@email.com"
                    className={errors.email ? "border-destructive" : ""}
                  />
                  {errors.email && (
                    <p className="text-sm text-destructive">{errors.email}</p>
                  )}
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="telegram">Telegram</Label>
                  <Input
                    id="telegram"
                    value={formData.telegram}
                    onChange={(e) => handleInputChange("telegram", e.target.value)}
                    placeholder="@username"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="whatsapp">WhatsApp</Label>
                  <Input
                    id="whatsapp"
                    value={formData.whatsapp}
                    onChange={(e) => handleInputChange("whatsapp", e.target.value)}
                    placeholder="+7 (999) 123-45-67"
                  />
                </div>
              </div>
            </CardContent>
          </Card>

          {/* –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <Card className="rounded-3xl">
            <CardHeader>
              <CardTitle>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="experience">–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–ª–µ—Ç)</Label>
                <Input
                  id="experience"
                  type="number"
                  value={formData.experience}
                  onChange={(e) => handleInputChange("experience", e.target.value)}
                  placeholder="5"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="education">–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</Label>
                <Textarea
                  id="education"
                  value={formData.education}
                  onChange={(e) => handleInputChange("education", e.target.value)}
                  placeholder="–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∏–Ω—Å—Ç–∏—Ç—É—Ç, —Ñ–∞–∫—É–ª—å—Ç–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∫—É–ª—å—Ç—É—Ä—ã..."
                  className="min-h-[80px]"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="certificates">–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏ –ª–∏—Ü–µ–Ω–∑–∏–∏</Label>
                <Textarea
                  id="certificates"
                  value={formData.certificates}
                  onChange={(e) => handleInputChange("certificates", e.target.value)}
                  placeholder="–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Ç—Ä–µ–Ω–µ—Ä–∞ –ø–æ —Ñ–∏—Ç–Ω–µ—Å—É, –ª–∏—Ü–µ–Ω–∑–∏—è –Ω–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∑–∞–Ω—è—Ç–∏–π..."
                  className="min-h-[80px]"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="workplaces">–ú–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã</Label>
                <Textarea
                  id="workplaces"
                  value={formData.workplaces}
                  onChange={(e) => handleInputChange("workplaces", e.target.value)}
                  placeholder="–§–∏—Ç–Ω–µ—Å-–∫–ª—É–± '–ó–¥–æ—Ä–æ–≤—å–µ', –°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è —à–∫–æ–ª–∞ ‚Ññ1..."
                  className="min-h-[80px]"
                />
              </div>
            </CardContent>
          </Card>

          {/* –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è */}
          <Card className="rounded-3xl">
            <CardHeader>
              <CardTitle>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label>–í–∏–¥—ã —Å–ø–æ—Ä—Ç–∞ *</Label>
                <div className="w-full">
                  <AnimatedTags
                    initialTags={availableSports}
                    selectedTags={formData.sports}
                    onChange={(selected) => handleInputChange("sports", selected)}
                    className="w-full"
                  />
                </div>
                {errors.sports && (
                  <p className="text-sm text-destructive">{errors.sports}</p>
                )}
              </div>

              <div className="space-y-2">
                <Label htmlFor="specialties">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏</Label>
                <Input
                  id="specialties"
                  value={formData.specialties}
                  onChange={(e) => handleInputChange("specialties", e.target.value)}
                  placeholder="–û–§–ü, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, —Ä–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏—è..."
                  className={errors.specialties ? "border-destructive" : ""}
                />
                {errors.specialties && (
                  <p className="text-sm text-destructive">{errors.specialties}</p>
                )}
              </div>

              <div className="space-y-3">
                <Label>–í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã</Label>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                  {["–î–µ—Ç–∏ (6-12)", "–ü–æ–¥—Ä–æ—Å—Ç–∫–∏ (13-17)", "–í–∑—Ä–æ—Å–ª—ã–µ (18-45)", "–ü–æ–∂–∏–ª—ã–µ (45+)"].map((group) => (
                    <div key={group} className="flex items-center space-x-2">
                      <Checkbox
                        id={group}
                        checked={formData.ageGroups.includes(group)}
                        onCheckedChange={(checked) => handleArrayChange("ageGroups", group, checked as boolean)}
                      />
                      <Label htmlFor={group} className="text-sm">{group}</Label>
                    </div>
                  ))}
                </div>
              </div>

              <div className="space-y-3">
                <Label>–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏</Label>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                  {["–ù–∞—á–∏–Ω–∞—é—â–∏–µ", "–°—Ä–µ–¥–Ω–∏–π", "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π"].map((level) => (
                    <div key={level} className="flex items-center space-x-2">
                      <Checkbox
                        id={level}
                        checked={formData.skillLevels.includes(level)}
                        onCheckedChange={(checked) => handleArrayChange("skillLevels", level, checked as boolean)}
                      />
                      <Label htmlFor={level} className="text-sm">{level}</Label>
                    </div>
                  ))}
                </div>
              </div>

              <div className="space-y-3">
                <Label>–¢–∏–ø—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</Label>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                  {["–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ", "–ì—Ä—É–ø–ø–æ–≤—ã–µ", "–û–Ω–ª–∞–π–Ω", "–í—ã–µ–∑–¥–Ω—ã–µ"].map((type) => (
                    <div key={type} className="flex items-center space-x-2">
                      <Checkbox
                        id={type}
                        checked={formData.trainingTypes.includes(type)}
                        onCheckedChange={(checked) => handleArrayChange("trainingTypes", type, checked as boolean)}
                      />
                      <Label htmlFor={type} className="text-sm">{type}</Label>
                    </div>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>

          {/* –¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ */}
          <Card className="rounded-3xl">
            <CardHeader>
              <CardTitle>–¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="individualPrice">–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (—Ä—É–±/—á–∞—Å)</Label>
                  <Input
                    id="individualPrice"
                    type="number"
                    value={formData.individualPrice}
                    onChange={(e) => handleInputChange("individualPrice", e.target.value)}
                    placeholder="3000"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="groupPrice">–ì—Ä—É–ø–ø–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (—Ä—É–±/—á–∞—Å)</Label>
                  <Input
                    id="groupPrice"
                    type="number"
                    value={formData.groupPrice}
                    onChange={(e) => handleInputChange("groupPrice", e.target.value)}
                    placeholder="1500"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="onlinePrice">–û–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (—Ä—É–±/—á–∞—Å)</Label>
                  <Input
                    id="onlinePrice"
                    type="number"
                    value={formData.onlinePrice}
                    onChange={(e) => handleInputChange("onlinePrice", e.target.value)}
                    placeholder="2000"
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="packages">–ü–∞–∫–µ—Ç—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</Label>
                <Textarea
                  id="packages"
                  value={formData.packages}
                  onChange={(e) => handleInputChange("packages", e.target.value)}
                  placeholder="10 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ - 25000 —Ä—É–±, –º–µ—Å—è—á–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç - 12000 —Ä—É–±..."
                  className="min-h-[80px]"
                />
              </div>
            </CardContent>
          </Card>

          {/* –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ */}
          <Card className="rounded-3xl">
            <CardHeader>
              <CardTitle>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-3">
                <Label>–î–Ω–∏ —Ä–∞–±–æ—Ç—ã</Label>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                  {["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"].map((day) => (
                    <div key={day} className="flex items-center space-x-2">
                      <Checkbox
                        id={day}
                        checked={formData.workDays.includes(day)}
                        onCheckedChange={(checked) => handleArrayChange("workDays", day, checked as boolean)}
                      />
                      <Label htmlFor={day} className="text-sm">{day}</Label>
                    </div>
                  ))}
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="workTime">–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã</Label>
                <Input
                  id="workTime"
                  value={formData.workTime}
                  onChange={(e) => handleInputChange("workTime", e.target.value)}
                  placeholder="9:00 - 21:00"
                />
              </div>

              <div className="space-y-3">
                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="homeVisits"
                    checked={formData.homeVisits}
                    onCheckedChange={(checked) => handleInputChange("homeVisits", checked as boolean)}
                  />
                  <Label htmlFor="homeVisits">–í—ã–µ–∑–¥ –∫ –∫–ª–∏–µ–Ω—Ç—É</Label>
                </div>
                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="onlineTraining"
                    checked={formData.onlineTraining}
                    onCheckedChange={(checked) => handleInputChange("onlineTraining", checked as boolean)}
                  />
                  <Label htmlFor="onlineTraining">–û–Ω–ª–∞–π–Ω-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</Label>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ */}
          <Card className="rounded-3xl">
            <CardHeader>
              <CardTitle>–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-3">
                {formData.socialLinks.map((link, index) => (
                  <div key={index} className="flex items-center gap-2">
                    <div className="w-24 text-sm text-muted-foreground capitalize">{link.type}</div>
                    <Input value={link.url} disabled className="flex-1" />
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={() => removeSocialLink(index)}
                    >
                      <X className="w-4 h-4" />
                    </Button>
                  </div>
                ))}
              </div>

              <div className="flex gap-2">
                <Select value={newSocialLink.type} onValueChange={(value) => setNewSocialLink(prev => ({ ...prev, type: value }))}>
                  <SelectTrigger className="w-32">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="instagram">Instagram</SelectItem>
                    <SelectItem value="youtube">YouTube</SelectItem>
                    <SelectItem value="vk">VK</SelectItem>
                    <SelectItem value="telegram">Telegram</SelectItem>
                    <SelectItem value="website">–°–∞–π—Ç</SelectItem>
                  </SelectContent>
                </Select>
                <Input
                  value={newSocialLink.url}
                  onChange={(e) => setNewSocialLink(prev => ({ ...prev, url: e.target.value }))}
                  placeholder="–°—Å—ã–ª–∫–∞"
                  className="flex-1"
                />
                <Button type="button" onClick={addSocialLink}>
                  <Plus className="w-4 h-4" />
                </Button>
              </div>
            </CardContent>
          </Card>

          {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <Card className="rounded-3xl">
            <CardHeader>
              <CardTitle>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="achievements">–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è *</Label>
                <Textarea
                  id="achievements"
                  value={formData.achievements}
                  onChange={(e) => handleInputChange("achievements", e.target.value)}
                  placeholder="–†–∞–∑—Ä—è–¥—ã, —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã, –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã..."
                  className={`min-h-[100px] ${errors.achievements ? "border-destructive" : ""}`}
                />
                {errors.achievements && (
                  <p className="text-sm text-destructive">{errors.achievements}</p>
                )}
              </div>

              <div className="space-y-2">
                <Label htmlFor="philosophy">–§–∏–ª–æ—Å–æ—Ñ–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</Label>
                <Textarea
                  id="philosophy"
                  value={formData.philosophy}
                  onChange={(e) => handleInputChange("philosophy", e.target.value)}
                  placeholder="–ú–æ–π –ø–æ–¥—Ö–æ–¥ –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞..."
                  className="min-h-[80px]"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="approach">–ü–æ–¥—Ö–æ–¥ –∫ —Ä–∞–±–æ—Ç–µ</Label>
                <Textarea
                  id="approach"
                  value={formData.approach}
                  onChange={(e) => handleInputChange("approach", e.target.value)}
                  placeholder="–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥, —Ä–∞–±–æ—Ç–∞ —Å –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π..."
                  className="min-h-[80px]"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="studentAchievements">–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–æ–≤</Label>
                <Textarea
                  id="studentAchievements"
                  value={formData.studentAchievements}
                  onChange={(e) => handleInputChange("studentAchievements", e.target.value)}
                  placeholder="–ú–æ–∏ —É—á–µ–Ω–∏–∫–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —Å–ª–µ–¥—É—é—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤..."
                  className="min-h-[80px]"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="motivation">–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞</Label>
                <Textarea
                  id="motivation"
                  value={formData.motivation}
                  onChange={(e) => handleInputChange("motivation", e.target.value)}
                  placeholder="–í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∞—è —Ü–∏—Ç–∞—Ç–∞ –∏–ª–∏ –¥–µ–≤–∏–∑..."
                  className="min-h-[60px]"
                />
              </div>
            </CardContent>
          </Card>

          <div className="flex gap-3 pt-4">
            <Button
              type="button"
              variant="outline"
              onClick={() => navigate("/u/board")}
              className="flex-1"
            >
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button
              type="submit"
              disabled={loading}
              className="flex-1 bg-primary hover:bg-primary/90"
              onClick={() => console.log('üñ±Ô∏è BoardCreatePage - Submit button clicked!')}
            >
              {loading ? (
                <>
                  <Loader className="w-4 h-4 mr-2 animate-spin" />
                  –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
                </>
              ) : (
                isEditing ? "–û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É" : "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"
              )}
            </Button>
          </div>
        </form>

        {/* –ö–Ω–æ–ø–∫–∞ "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–≤–µ—Ä—Ö" */}
        {showScrollButton && (
          <Button 
            onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}
            className="fixed bottom-24 md:bottom-2 left-1/2 transform -translate-x-1/2 z-50 rounded-full px-8 py-3 bg-primary text-primary-foreground hover:bg-primary/90 shadow-lg"
          >
            <ArrowUp className="w-5 h-5" />
          </Button>
        )}
      </div>
    </SocialContainer>
  );
}


