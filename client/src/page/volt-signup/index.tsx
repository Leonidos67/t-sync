import { Link, useNavigate, useSearchParams } from "react-router-dom";
import { useState, useEffect } from "react";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import SocialLogo from "@/components/logo/social-logo";
import GoogleOauthButton from "@/components/auth/google-oauth-button";
import { useMutation } from "@tanstack/react-query";
import { registerMutationFn } from "@/lib/api";
import { toast } from "@/hooks/use-toast";
import { Loader } from "lucide-react";
import { getAuroraUser, AuroraUser } from "@/lib/aurora-storage";
import useVoltAuth from "@/hooks/api/use-volt-auth";
import UsernameSetup from "@/components/auth/UsernameSetup";

const VoltSignUp = () => {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const fromAurora = searchParams.get("fromAurora") === "true";
  const { data: currentUser } = useVoltAuth();
  const [auroraUser, setAuroraUser] = useState<AuroraUser | null>(null);
  const [showUsernameSetup, setShowUsernameSetup] = useState(false);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Aurora Rise –∏–∑ localStorage
  useEffect(() => {
    const savedUser = getAuroraUser();
    if (savedUser) {
      setAuroraUser(savedUser);
    }
  }, []);

  const { mutate, isPending } = useMutation({
    mutationFn: registerMutationFn,
  });
  const formSchema = z.object({
    name: z.string().trim().min(1, {
      message: "–£–∫–∞–∂–∏—Ç–µ –∏–º—è",
    }),
    email: z.string().trim().email("–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ—á—Ç—ã").min(1, {
      message: "–¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É",
    }),
    password: z.string().trim().min(1, {
      message: "–£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å",
    }),
  });

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: "",
      email: "",
      password: "",
    },
  });

  const onSubmit = (values: z.infer<typeof formSchema>) => {
    if (isPending) return;
    mutate(values, {
      onSuccess: (data) => {
        const user = data.user;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è username
        if (!user.username) {
          setShowUsernameSetup(true);
          return;
        }
        
        // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ Volt
        navigate("/u/");
      },
      onError: (error) => {
        console.log(error);
        toast({
          title: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
          description: error.message,
          variant: "destructive",
        });
      },
    });
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ UsernameSetup
  const handleUsernameSuccess = () => {
    setShowUsernameSetup(false);
    navigate("/u/");
  };

  // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è username
  if (showUsernameSetup) {
    return (
      <UsernameSetup 
        onSuccess={handleUsernameSuccess}
      />
    );
  }

  return (
    <div className="tsygram-dark bg-background text-foreground min-h-svh flex items-center justify-center px-4 sm:px-2 lg:px-8 pb-16 md:pb-0">
      <div className="w-full max-w-md">
        {/* –õ–æ–≥–æ—Ç–∏–ø –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ - —Ç–µ–ø–µ—Ä—å –≤ —Ü–µ–Ω—Ç—Ä–µ –≤–º–µ—Å—Ç–µ —Å —Ñ–æ—Ä–º–æ–π */}
        <div className="text-center mb-8">
          <div className="flex items-center justify-center gap-3 mb-4">
            <SocialLogo url={null} />
            <span className="text-2xl font-bold text-primary">Volt</span>
          </div>
          <p className="text-muted-foreground">
            –°–æ–æ–±—â–µ—Å—Ç–≤–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤ –∏ —Ç—Ä–µ–Ω–µ—Ä–æ–≤
          </p>
        </div>

        {/* –ö–∞—Ä—Ç–æ—á–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */}
        <Card className="bg-background rounded-3xl shadow-2xl">
          <CardHeader className="text-center">
            {(fromAurora || auroraUser) && (
              <div className="mt-4 p-4 bg-primary/10 border border-primary/20 rounded-3xl">
                <p className="text-sm text-primary font-medium">
                  üîê –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤—Ö–æ–¥ –≤ Aurora Rise Platform
                </p>
                <p className="text-xs text-muted-foreground mt-1">
                  –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç{" "}
                  <Link 
                    to="/id" 
                    className=" hover:text-primary/80 font-medium underline underline-offset-2"
                  >
                    Aurora Rise ID
                  </Link>{" "}
                  –¥–ª—è Volt –∏–ª–∏ –≤–æ–π—Ç–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
                </p>
              </div>
            )}
          </CardHeader>
          <CardContent className="pt-0">
            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmit)}>
                <div className="grid gap-6">
                  <div className="flex flex-col gap-4">
                    <GoogleOauthButton label="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Google" />
                  </div>
                  <div className="relative text-center text-sm after:absolute after:inset-0 after:top-1/2 after:z-0 after:flex after:items-center after:border-t after:border-border">
                    <span className="relative z-10 bg-card px-4 text-muted-foreground">
                      –∏–ª–∏
                    </span>
                  </div>
                  <div className="grid gap-4">
                    <div className="grid gap-2">
                      <FormField
                        control={form.control}
                        name="name"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="text-sm font-medium text-foreground">
                              –ù–∏–∫
                            </FormLabel>
                            <FormControl>
                              <Input
                                placeholder=""
                                className="h-12 border-border focus:border-primary focus:ring-primary"
                                {...field}
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                    <div className="grid gap-2">
                      <FormField
                        control={form.control}
                        name="email"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="text-sm font-medium text-foreground">
                              –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞
                            </FormLabel>
                            <FormControl>
                              <Input
                                placeholder=""
                                className="h-12 border-border focus:border-primary focus:ring-primary"
                                {...field}
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                    <div className="grid gap-2">
                      <FormField
                        control={form.control}
                        name="password"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="text-sm font-medium text-foreground">
                              –ü–∞—Ä–æ–ª—å
                            </FormLabel>
                            <FormControl>
                              <Input
                                type="password"
                                placeholder=""
                                className="h-12 border-border focus:border-primary focus:ring-primary"
                                {...field}
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                    <Button
                      type="submit"
                      disabled={isPending}
                      className="w-full h-12 bg-primary hover:bg-primary/90 text-primary-foreground font-medium transition-all duration-200 shadow-lg hover:shadow-xl"
                    >
                      {isPending && <Loader className="animate-spin mr-2" />}
                      –°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
                    </Button>
                  </div>
                  <div className="text-center text-sm text-muted-foreground">
                    –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?{" "}
                    <Link
                      to={(fromAurora || auroraUser) ? "/volt-login?fromAurora=true" : "/volt-login"}
                      className="text-primary hover:text-primary/80 font-medium underline underline-offset-4"
                    >
                      –í–æ–π—Ç–∏
                    </Link>
                  </div>
                </div>
              </form>
            </Form>
          </CardContent>
        </Card>

        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="mt-8 text-center">
          <p className="text-sm text-muted-foreground">
            –ü—Ä–æ–¥—É–∫—Ç —Å–µ—Ä–≤–∏—Å–∞{" "}
            <a href="/" className="underline hover:text-primary transition-colors">
              Aurora Rise
            </a>
          </p>
        </div>
      </div>
    </div>
  );
};

export default VoltSignUp;
