import { NextFunction, Request, Response } from "express";
import { asyncHandler } from "../middlewares/asyncHandler.middleware";
import { config } from "../config/app.config";
import { registerSchema } from "../validation/auth.validation";
import { HTTPSTATUS } from "../config/http.config";
import { registerUserService, updateUserRoleService, verifyUserService, loginOrCreateAccountService } from "../services/auth.service";
import passport from "passport";
import AccountModel from "../models/account.model";
import UserModel from "../models/user.model";
import { ProviderEnum } from "../enums/account-provider.enum";
import { generateToken } from "../utils/jwt";

export const googleLoginCallback = asyncHandler(
  async (req: Request, res: Response) => {
    const currentWorkspace = req.user?.currentWorkspace;

    if (!currentWorkspace) {
      return res.redirect(
        `${config.FRONTEND_GOOGLE_CALLBACK_URL}?status=failure`
      );
    }

    return res.redirect(
      `${config.FRONTEND_URL}/`
    );
  }
);

export const registerUserController = asyncHandler(
  async (req: Request, res: Response) => {
    const body = registerSchema.parse({
      ...req.body,
    });

    await registerUserService(body);

    return res.status(HTTPSTATUS.CREATED).json({
      message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
    });
  }
);

export const loginController = asyncHandler(
  async (req: Request, res: Response) => {
    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(HTTPSTATUS.BAD_REQUEST).json({
        message: "Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã",
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await verifyUserService({ email, password });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
    const token = generateToken({
      userId: String(user._id),
      email: user.email || email,
    });

    console.log("‚úÖ Login successful, JWT token generated:", {
      userId: user._id,
      email: user.email,
    });

    return res.status(HTTPSTATUS.OK).json({
      message: "–£—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É",
      user: user.omitPassword(),
      token, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º JWT —Ç–æ–∫–µ–Ω –∫–ª–∏–µ–Ω—Ç—É
    });
  }
);

export const logOutController = asyncHandler(
  async (req: Request, res: Response) => {
    // –° JWT —Ç–æ–∫–µ–Ω–∞–º–∏ –ª–æ–≥–∞—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ (—É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ localStorage)
    // –°–µ—Ä–≤–µ—Ä –Ω–µ —Ö—Ä–∞–Ω–∏—Ç —Å–µ—Å—Å–∏–∏, –ø–æ—ç—Ç–æ–º—É –∑–¥–µ—Å—å –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
    
    console.log("üîê User logged out:", req.user?._id);

    return res
      .status(HTTPSTATUS.OK)
      .json({ message: "–£—Å–ø–µ—à–Ω–æ –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã" });
  }
);

export const updateUserRoleController = asyncHandler(
  async (req: Request, res: Response) => {
    const { userRole } = req.body;
    
    if (!req.user?._id) {
      return res.status(HTTPSTATUS.UNAUTHORIZED).json({
        message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω",
      });
    }

    const updatedUser = await updateUserRoleService(req.user._id.toString(), userRole);

    return res.status(HTTPSTATUS.OK).json({
      message: "–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
      user: updatedUser,
    });
  }
);

export const autoLoginController = asyncHandler(
  async (req: Request, res: Response) => {
    const { email, targetService } = req.body;
    
    console.log('Auto login request:', { email, targetService, currentUser: req.user });
    
    if (!email) {
      return res.status(HTTPSTATUS.BAD_REQUEST).json({
        message: "Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞",
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ JWT —Ç–æ–∫–µ–Ω (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
    if (req.user && req.user.email === email) {
      console.log('User already logged in with JWT');
      return res.status(HTTPSTATUS.OK).json({
        message: "–£—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É",
        user: req.user,
        targetService: targetService || 'volt',
      });
    }

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    console.log('Looking for account with email:', email);
    const account = await AccountModel.findOne({ 
      provider: ProviderEnum.EMAIL, 
      providerId: email 
    });
    
    if (!account) {
      console.log('Account not found for email:', email);
      return res.status(HTTPSTATUS.UNAUTHORIZED).json({
        message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
      });
    }

    console.log('Account found, looking for user:', account.userId);
    const user = await UserModel.findById(account.userId);
    if (!user) {
      console.log('User not found for account:', account.userId);
      return res.status(HTTPSTATUS.UNAUTHORIZED).json({
        message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
      });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
    const token = generateToken({
      userId: String(user._id),
      email: user.email || '',
    });

    console.log('JWT token generated successfully for:', user.email);
    return res.status(HTTPSTATUS.OK).json({
      message: "–£—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É",
      user: user.omitPassword(),
      token,
      targetService: targetService || 'volt',
    });
  }
);