const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üé® Creating application icons for all platforms...\n');

const assetsPath = path.join(__dirname, '..', 'electron', 'assets');
const sourcePng = path.join(assetsPath, 'icon.png');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏—Å—Ö–æ–¥–Ω–æ–π –∏–∫–æ–Ω–∫–∏
if (!fs.existsSync(sourcePng)) {
  console.error('‚ùå Source icon.png not found at:', sourcePng);
  process.exit(1);
}

// –°–æ–∑–¥–∞–Ω–∏–µ .ico –¥–ª—è Windows (–µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç)
const icoPath = path.join(assetsPath, 'icon.ico');
if (!fs.existsSync(icoPath)) {
  console.log('üìù Creating Windows icon (.ico)...');
  
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ImageMagick –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    execSync(`magick convert "${sourcePng}" -define icon:auto-resize=256,128,64,48,32,16 "${icoPath}"`, { stdio: 'ignore' });
    console.log('‚úÖ Windows icon created successfully');
  } catch (e) {
    console.log('‚ö†Ô∏è  ImageMagick not found. Copying PNG as fallback.');
    console.log('   For better results, install ImageMagick: https://imagemagick.org/');
    // –ö–æ–ø–∏—Ä—É–µ–º PNG –∫–∞–∫ fallback
    fs.copyFileSync(sourcePng, icoPath);
  }
} else {
  console.log('‚úÖ Windows icon already exists');
}

// –°–æ–∑–¥–∞–Ω–∏–µ .icns –¥–ª—è macOS
const icnsPath = path.join(assetsPath, 'icon.icns');
console.log('\nüìù Creating macOS icon (.icns)...');

try {
  // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –∏–∫–æ–Ω–æ–∫
  const iconsetPath = path.join(assetsPath, 'icon.iconset');
  if (fs.existsSync(iconsetPath)) {
    fs.rmSync(iconsetPath, { recursive: true, force: true });
  }
  fs.mkdirSync(iconsetPath);

  // –†–∞–∑–º–µ—Ä—ã –∏–∫–æ–Ω–æ–∫ –¥–ª—è macOS
  const sizes = [
    { size: 16, scale: 1 },
    { size: 16, scale: 2 },
    { size: 32, scale: 1 },
    { size: 32, scale: 2 },
    { size: 128, scale: 1 },
    { size: 128, scale: 2 },
    { size: 256, scale: 1 },
    { size: 256, scale: 2 },
    { size: 512, scale: 1 },
    { size: 512, scale: 2 }
  ];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
  let hasSips = false;
  let hasImageMagick = false;

  try {
    execSync('sips --version', { stdio: 'ignore' });
    hasSips = true;
  } catch (e) {}

  try {
    execSync('magick --version', { stdio: 'ignore' });
    hasImageMagick = true;
  } catch (e) {}

  if (hasSips) {
    console.log('Using macOS sips for icon conversion...');
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º sips (–≤—Å—Ç—Ä–æ–µ–Ω–æ –≤ macOS)
    sizes.forEach(({ size, scale }) => {
      const actualSize = size * scale;
      const filename = scale === 1 ? `icon_${size}x${size}.png` : `icon_${size}x${size}@2x.png`;
      const outputPath = path.join(iconsetPath, filename);
      execSync(`sips -z ${actualSize} ${actualSize} "${sourcePng}" --out "${outputPath}"`, { stdio: 'ignore' });
    });

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º iconset –≤ icns
    execSync(`iconutil -c icns "${iconsetPath}" -o "${icnsPath}"`, { stdio: 'ignore' });
    console.log('‚úÖ macOS icon created successfully using sips');
  } else if (hasImageMagick) {
    console.log('Using ImageMagick for icon conversion...');
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º ImageMagick
    sizes.forEach(({ size, scale }) => {
      const actualSize = size * scale;
      const filename = scale === 1 ? `icon_${size}x${size}.png` : `icon_${size}x${size}@2x.png`;
      const outputPath = path.join(iconsetPath, filename);
      execSync(`magick convert "${sourcePng}" -resize ${actualSize}x${actualSize} "${outputPath}"`, { stdio: 'ignore' });
    });

    // –ù–∞ Windows/Linux –Ω—É–∂–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è icns
    try {
      execSync(`png2icns "${icnsPath}" "${iconsetPath}"/*.png`, { stdio: 'ignore' });
      console.log('‚úÖ macOS icon created successfully using ImageMagick + png2icns');
    } catch (e) {
      console.log('‚ö†Ô∏è  png2icns not found, copying largest PNG as fallback');
      fs.copyFileSync(sourcePng, icnsPath);
    }
  } else {
    console.log('‚ö†Ô∏è  No icon conversion tools found (sips or ImageMagick)');
    console.log('   Creating basic .icns by copying PNG (may not work perfectly)');
    
    // –ü—Ä–æ—Å—Ç–æ–π fallback - –∫–æ–ø–∏—Ä—É–µ–º PNG
    // –≠—Ç–æ –Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ, –Ω–æ –ª—É—á—à–µ —á–µ–º –Ω–∏—á–µ–≥–æ
    fs.copyFileSync(sourcePng, icnsPath);
  }

  // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
  if (fs.existsSync(iconsetPath)) {
    fs.rmSync(iconsetPath, { recursive: true, force: true });
  }

} catch (error) {
  console.error('‚ö†Ô∏è  Error creating macOS icon:', error.message);
  console.log('   Using PNG as fallback');
  fs.copyFileSync(sourcePng, icnsPath);
}

console.log('\n‚úÖ Icon creation completed!');
console.log('üìÅ Icons location:', assetsPath);
console.log('   - icon.png (source)');
console.log('   - icon.ico (Windows)');
console.log('   - icon.icns (macOS)');
console.log('\nüí° Note: For best results on non-macOS systems, install:');
console.log('   - ImageMagick: https://imagemagick.org/');
console.log('   - png2icns: npm install -g png2icns');

